/*
*
输入两个整数序列，第一个序列表示栈的压入顺序，
请判断第二个序列是否为该栈的弹出顺序。假设压入栈的所有数字均不相等。
例如序列1,2,3,4,5是某栈的压入顺序，序列4，5,3,2,1是该压栈序列对应的一个弹出序列，
但4,3,5,1,2就不可能是该压栈序列的弹出序列。（注意：这两个序列的长度是相等的）
*
*/
/**idea**/
解决该问题需要采用一个辅助栈C，将原栈A的数据依次压入栈C，每次都与栈B中栈底数据开始比较，
如果不等则将栈A的下一个数据压入栈C，如果相等则删除辅助栈C的栈顶元素，并且栈B也指向后一个元素。
最后返回辅助栈C是否为空的结果，如果为空则返回true，否则返回false;

/**code**/
bool IsPopOrder(vector<int> pushV,vector<int> popV) {
        if(pushV.empty()) return false;
        vector<int> res;
        for(int i=0,j=0; i<pushV.size(); i++){
            res.push_back(pushV[i]);
            while(j<popV.size() && res.back() == popV[j]){
                res.pop_back();
                j++;
            }
        }
        return res.empty();
    }
