/*
*
HZ偶尔会拿些专业问题来忽悠那些非计算机专业的同学。今天测试组开完会后,他又发话了:
在古老的一维模式识别中,常常需要计算连续子向量的最大和,当向量全为正数的时候,问题很好解决。
但是,如果向量中包含负数,是否应该包含某个负数,并期望旁边的正数会弥补它呢？
例如:{6,-3,-2,7,-15,1,2,2},连续子向量的最大和为8(从第0个开始,到第3个为止)。
你会不会被他忽悠住？(子向量的长度至少是1)
*
*/

/**idea**/
因为要求连续子向量的最大和，首先可能会想到从头开始连续加，但是不要因为题目中从1开始就被误导，
要注意最大和可能不是从头开始的，因此在求和时可以设置如果前N项和sum小于0则可以将sum的值赋值为第N+1项的值，
每次循环都要与设置的最大值max进行比较，如果sum>max则将sum的值赋给max，最后输出max的值。
同时要注意向量中的值可能都是负值，因此在设置max的默认值时应该尽可能小。
/**code**/
 int FindGreatestSumOfSubArray(vector<int> array) {
         if(array.size() == 0)return 0;
          int max=-1000000,sum=0;
          for(int i=0; i<array.size();i++){
             if(sum <= 0){
                 sum = array[i];
             }else{
                 sum += array[i];
             }
             if(max < sum){
                 max = sum;
             }
          }
          return max;
    }
