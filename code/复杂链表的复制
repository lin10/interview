/**
输入一个复杂链表（每个节点中有节点值，以及两个指针，一个指向下一个节点，
另一个特殊指针指向任意一个节点），返回结果为复制后复杂链表的head。
（注意，输出结果中请不要返回参数中的节点引用，否则判题程序会直接返回空）
**/
/**idea**/
先在旧链表中复制每个节点 A->A'->B->B'
然后遍历设置复制后节点的兄弟节点random，A'->random = A->random->next;
将新链表从旧表中拆分出来。
/**code**/
/*
struct RandomListNode {
    int label;
    struct RandomListNode *next, *random;
    RandomListNode(int x) :
            label(x), next(NULL), random(NULL) {
    }
};
*/
RandomListNode* Clone(RandomListNode* pHead)
    {
        if(!pHead) return NULL;
        RandomListNode *resList = pHead; 
        while(resList)
        {
            RandomListNode *List = new RandomListNode(resList->label);
            List->next = resList->next;
            resList->next = List;
            resList = List->next;
        }
        resList = pHead;
        while(resList)
        {
            RandomListNode *List = resList->next;
            if(resList->random)
            {
                List->random = resList->random->next;
            }
            resList = List->next;
        }
        RandomListNode *respHead = pHead->next;
        RandomListNode *tmp;
        resList = pHead;
        while(resList->next)
        {
            tmp = resList->next;
            resList->next = tmp->next;
            resList = tmp;
        }
        return respHead;
    }
